{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: userData => api.post('/auth/login', userData),\n  logout: userData => api.post('/auth/logout', userData)\n};\n\n// Users API\nexport const usersAPI = {\n  getAllUsers: () => api.get('/users'),\n  getUserByUsername: username => api.get(`/users/${username}`)\n};\n\n// Messages API\nexport const messagesAPI = {\n  sendMessage: messageData => api.post('/messages/send', messageData),\n  getConversation: username => api.get(`/messages/conversation/${username}`),\n  getConversations: () => api.get('/messages/conversations')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","register","userData","post","login","logout","usersAPI","getAllUsers","get","getUserByUsername","username","messagesAPI","sendMessage","messageData","getConversation","getConversations"],"sources":["/home/rounak-dagar/securechat/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (userData) => api.post('/auth/login', userData),\n  logout: (userData) => api.post('/auth/logout', userData),\n};\n\n// Users API\nexport const usersAPI = {\n  getAllUsers: () => api.get('/users'),\n  getUserByUsername: (username) => api.get(`/users/${username}`),\n};\n\n// Messages API\nexport const messagesAPI = {\n  sendMessage: (messageData) => api.post('/messages/send', messageData),\n  getConversation: (username) => api.get(`/messages/conversation/${username}`),\n  getConversations: () => api.get('/messages/conversations'),\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKd,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGF,QAAQ,IAAKd,GAAG,CAACe,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;EACtDG,MAAM,EAAGH,QAAQ,IAAKd,GAAG,CAACe,IAAI,CAAC,cAAc,EAAED,QAAQ;AACzD,CAAC;;AAED;AACA,OAAO,MAAMI,QAAQ,GAAG;EACtBC,WAAW,EAAEA,CAAA,KAAMnB,GAAG,CAACoB,GAAG,CAAC,QAAQ,CAAC;EACpCC,iBAAiB,EAAGC,QAAQ,IAAKtB,GAAG,CAACoB,GAAG,CAAC,UAAUE,QAAQ,EAAE;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAGC,WAAW,IAAKzB,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAEU,WAAW,CAAC;EACrEC,eAAe,EAAGJ,QAAQ,IAAKtB,GAAG,CAACoB,GAAG,CAAC,0BAA0BE,QAAQ,EAAE,CAAC;EAC5EK,gBAAgB,EAAEA,CAAA,KAAM3B,GAAG,CAACoB,GAAG,CAAC,yBAAyB;AAC3D,CAAC;AAED,eAAepB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
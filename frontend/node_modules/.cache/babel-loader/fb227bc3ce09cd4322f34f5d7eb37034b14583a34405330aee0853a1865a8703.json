{"ast":null,"code":"import * as openpgp from 'openpgp';\nexport const generateKeyPair = async (username, password) => {\n  try {\n    const {\n      privateKey,\n      publicKey\n    } = await openpgp.generateKey({\n      type: 'rsa',\n      rsaBits: 2048,\n      userIDs: [{\n        name: username,\n        email: `${username}@securechat.local`\n      }],\n      passphrase: password\n    });\n    return {\n      privateKey,\n      publicKey\n    };\n  } catch (error) {\n    throw new Error('Failed to generate key pair: ' + error.message);\n  }\n};\nexport const getFingerprint = async publicKeyArmored => {\n  try {\n    const publicKey = await openpgp.readKey({\n      armoredKey: publicKeyArmored\n    });\n    return publicKey.getFingerprint().toUpperCase().match(/.{1,4}/g).join(' ');\n  } catch (error) {\n    throw new Error('Failed to get fingerprint: ' + error.message);\n  }\n};\nexport const encryptMessage = async (message, recipientPublicKey) => {\n  try {\n    const publicKey = await openpgp.readKey({\n      armoredKey: recipientPublicKey\n    });\n    const encrypted = await openpgp.encrypt({\n      message: await openpgp.createMessage({\n        text: message\n      }),\n      encryptionKeys: publicKey\n    });\n    return encrypted;\n  } catch (error) {\n    throw new Error('Failed to encrypt message: ' + error.message);\n  }\n};\nexport const decryptMessage = async (encryptedMessage, privateKeyArmored, passphrase) => {\n  try {\n    const message = await openpgp.readMessage({\n      armoredMessage: encryptedMessage\n    });\n    const privateKey = await openpgp.decryptKey({\n      privateKey: await openpgp.readPrivateKey({\n        armoredKey: privateKeyArmored\n      }),\n      passphrase\n    });\n    const {\n      data: decrypted\n    } = await openpgp.decrypt({\n      message,\n      decryptionKeys: privateKey\n    });\n    return decrypted;\n  } catch (error) {\n    throw new Error('Failed to decrypt message: ' + error.message);\n  }\n};","map":{"version":3,"names":["openpgp","generateKeyPair","username","password","privateKey","publicKey","generateKey","type","rsaBits","userIDs","name","email","passphrase","error","Error","message","getFingerprint","publicKeyArmored","readKey","armoredKey","toUpperCase","match","join","encryptMessage","recipientPublicKey","encrypted","encrypt","createMessage","text","encryptionKeys","decryptMessage","encryptedMessage","privateKeyArmored","readMessage","armoredMessage","decryptKey","readPrivateKey","data","decrypted","decrypt","decryptionKeys"],"sources":["/home/rounak-dagar/securechat/frontend/src/services/crypto.js"],"sourcesContent":["import * as openpgp from 'openpgp';\n\nexport const generateKeyPair = async (username, password) => {\n  try {\n    const { privateKey, publicKey } = await openpgp.generateKey({\n      type: 'rsa',\n      rsaBits: 2048,\n      userIDs: [{ name: username, email: `${username}@securechat.local` }],\n      passphrase: password\n    });\n\n    return { privateKey, publicKey };\n  } catch (error) {\n    throw new Error('Failed to generate key pair: ' + error.message);\n  }\n};\n\nexport const getFingerprint = async (publicKeyArmored) => {\n  try {\n    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });\n    return publicKey.getFingerprint().toUpperCase().match(/.{1,4}/g).join(' ');\n  } catch (error) {\n    throw new Error('Failed to get fingerprint: ' + error.message);\n  }\n};\n\nexport const encryptMessage = async (message, recipientPublicKey) => {\n  try {\n    const publicKey = await openpgp.readKey({ armoredKey: recipientPublicKey });\n    \n    const encrypted = await openpgp.encrypt({\n      message: await openpgp.createMessage({ text: message }),\n      encryptionKeys: publicKey\n    });\n\n    return encrypted;\n  } catch (error) {\n    throw new Error('Failed to encrypt message: ' + error.message);\n  }\n};\n\nexport const decryptMessage = async (encryptedMessage, privateKeyArmored, passphrase) => {\n  try {\n    const message = await openpgp.readMessage({ armoredMessage: encryptedMessage });\n    const privateKey = await openpgp.decryptKey({\n      privateKey: await openpgp.readPrivateKey({ armoredKey: privateKeyArmored }),\n      passphrase\n    });\n\n    const { data: decrypted } = await openpgp.decrypt({\n      message,\n      decryptionKeys: privateKey\n    });\n\n    return decrypted;\n  } catch (error) {\n    throw new Error('Failed to decrypt message: ' + error.message);\n  }\n};"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,SAAS;AAElC,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC3D,IAAI;IACF,MAAM;MAAEC,UAAU;MAAEC;IAAU,CAAC,GAAG,MAAML,OAAO,CAACM,WAAW,CAAC;MAC1DC,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,CAAC;QAAEC,IAAI,EAAER,QAAQ;QAAES,KAAK,EAAE,GAAGT,QAAQ;MAAoB,CAAC,CAAC;MACpEU,UAAU,EAAET;IACd,CAAC,CAAC;IAEF,OAAO;MAAEC,UAAU;MAAEC;IAAU,CAAC;EAClC,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGD,KAAK,CAACE,OAAO,CAAC;EAClE;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,gBAAgB,IAAK;EACxD,IAAI;IACF,MAAMZ,SAAS,GAAG,MAAML,OAAO,CAACkB,OAAO,CAAC;MAAEC,UAAU,EAAEF;IAAiB,CAAC,CAAC;IACzE,OAAOZ,SAAS,CAACW,cAAc,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,SAAS,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC5E,CAAC,CAAC,OAAOT,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChE;AACF,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAOR,OAAO,EAAES,kBAAkB,KAAK;EACnE,IAAI;IACF,MAAMnB,SAAS,GAAG,MAAML,OAAO,CAACkB,OAAO,CAAC;MAAEC,UAAU,EAAEK;IAAmB,CAAC,CAAC;IAE3E,MAAMC,SAAS,GAAG,MAAMzB,OAAO,CAAC0B,OAAO,CAAC;MACtCX,OAAO,EAAE,MAAMf,OAAO,CAAC2B,aAAa,CAAC;QAAEC,IAAI,EAAEb;MAAQ,CAAC,CAAC;MACvDc,cAAc,EAAExB;IAClB,CAAC,CAAC;IAEF,OAAOoB,SAAS;EAClB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChE;AACF,CAAC;AAED,OAAO,MAAMe,cAAc,GAAG,MAAAA,CAAOC,gBAAgB,EAAEC,iBAAiB,EAAEpB,UAAU,KAAK;EACvF,IAAI;IACF,MAAMG,OAAO,GAAG,MAAMf,OAAO,CAACiC,WAAW,CAAC;MAAEC,cAAc,EAAEH;IAAiB,CAAC,CAAC;IAC/E,MAAM3B,UAAU,GAAG,MAAMJ,OAAO,CAACmC,UAAU,CAAC;MAC1C/B,UAAU,EAAE,MAAMJ,OAAO,CAACoC,cAAc,CAAC;QAAEjB,UAAU,EAAEa;MAAkB,CAAC,CAAC;MAC3EpB;IACF,CAAC,CAAC;IAEF,MAAM;MAAEyB,IAAI,EAAEC;IAAU,CAAC,GAAG,MAAMtC,OAAO,CAACuC,OAAO,CAAC;MAChDxB,OAAO;MACPyB,cAAc,EAAEpC;IAClB,CAAC,CAAC;IAEF,OAAOkC,SAAS;EAClB,CAAC,CAAC,OAAOzB,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGD,KAAK,CAACE,OAAO,CAAC;EAChE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/rounak-dagar/securechat/frontend/src/components/Chat/ChatContainer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { usersAPI, messagesAPI } from '../../services/api';\nimport { hybridEncryptMessage, hybridDecryptMessage } from '../../services/crypto';\nimport { getSocket } from '../../services/socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatContainer = ({\n  currentUser,\n  showStatus\n}) => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    usersAPI.getAllUsers().then(res => setUsers(res.data));\n  }, []);\n  useEffect(() => {\n    if (selectedUser) {\n      messagesAPI.getConversation(selectedUser.username).then(res => setMessages(res.data));\n    }\n  }, [selectedUser]);\n  useEffect(() => {\n    const socket = getSocket();\n    if (!socket) return;\n    socket.on('receive_message', msg => {\n      if (msg.from === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.username) || msg.to === (selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.username)) {\n        setMessages(prev => [...prev, msg]);\n      }\n    });\n    return () => {\n      socket.off('receive_message');\n    };\n  }, [selectedUser]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!input || !selectedUser) return;\n    setLoading(true);\n    try {\n      const {\n        encryptedMessage,\n        encryptedAESKey\n      } = await hybridEncryptMessage(input, selectedUser.publicKey);\n      const messageData = {\n        to: selectedUser.username,\n        encryptedContent: encryptedMessage,\n        encryptedAESKey,\n        messageType: 'text'\n      };\n      await messagesAPI.sendMessage(messageData);\n      setMessages(prev => [...prev, {\n        from: currentUser.username,\n        to: selectedUser.username,\n        encryptedContent: encryptedMessage,\n        encryptedAESKey,\n        messageType: 'text'\n      }]);\n      getSocket().emit('send_message', {\n        from: currentUser.username,\n        to: selectedUser.username,\n        encryptedContent: encryptedMessage,\n        encryptedAESKey,\n        messageType: 'text'\n      });\n      setInput('');\n      showStatus('Message sent', 'success');\n    } catch (err) {\n      showStatus('Failed to send message', 'error');\n    }\n    setLoading(false);\n  };\n  const renderMessages = () => messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(MessageItem, {\n    msg: msg,\n    currentUser: currentUser\n  }, idx, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"user-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedUser(user),\n            children: [user.username, \" \", user.isOnline ? 'ðŸŸ¢' : 'âšª']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, user.username, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"chat-main\",\n      children: selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Chat with \", selectedUser.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: renderMessages()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMessage,\n          className: \"send-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            placeholder: \"Type your message...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: loading,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select a user to start chatting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatContainer, \"4YV6TA3oa0xPEfkTIAfuekT3Y90=\");\n_c = ChatContainer;\nconst MessageItem = ({\n  msg,\n  currentUser\n}) => {\n  _s2();\n  const [decrypted, setDecrypted] = useState('');\n  useEffect(() => {\n    const decrypt = async () => {\n      try {\n        const encryptedPrivateKey = localStorage.getItem('privateKey');\n        const passphrase = prompt('Enter your password to decrypt messages:');\n        const privateKey = await decryptPrivateKeyAES(encryptedPrivateKey, passphrase);\n        if (msg.from === currentUser.username) {\n          setDecrypted('[You] ' + msg.encryptedContent);\n        } else {\n          const dec = await hybridDecryptMessage(msg.encryptedContent, msg.encryptedAESKey, privateKey, passphrase);\n          setDecrypted(dec);\n        }\n      } catch {\n        setDecrypted('[Encrypted]');\n      }\n    };\n    decrypt();\n  }, [msg, currentUser]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${msg.from === currentUser.username ? 'sent' : 'received'}`,\n    children: decrypted\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 10\n  }, this);\n};\n_s2(MessageItem, \"p5qMHw/IAbEL1ybyHdCYv2QSVmY=\");\n_c2 = MessageItem;\nexport default ChatContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"MessageItem\");","map":{"version":3,"names":["React","useState","useEffect","usersAPI","messagesAPI","hybridEncryptMessage","hybridDecryptMessage","getSocket","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatContainer","currentUser","showStatus","_s","users","setUsers","selectedUser","setSelectedUser","messages","setMessages","input","setInput","loading","setLoading","getAllUsers","then","res","data","getConversation","username","socket","on","msg","from","to","prev","off","sendMessage","e","preventDefault","encryptedMessage","encryptedAESKey","publicKey","messageData","encryptedContent","messageType","emit","err","renderMessages","map","idx","MessageItem","fileName","_jsxFileName","lineNumber","columnNumber","className","children","user","onClick","isOnline","onSubmit","type","value","onChange","target","placeholder","required","disabled","_c","_s2","decrypted","setDecrypted","decrypt","encryptedPrivateKey","localStorage","getItem","passphrase","prompt","privateKey","decryptPrivateKeyAES","dec","_c2","$RefreshReg$"],"sources":["/home/rounak-dagar/securechat/frontend/src/components/Chat/ChatContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { usersAPI, messagesAPI } from '../../services/api';\nimport { hybridEncryptMessage, hybridDecryptMessage } from '../../services/crypto';\nimport { getSocket } from '../../services/socket';\n\nconst ChatContainer = ({ currentUser, showStatus }) => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    usersAPI.getAllUsers().then(res => setUsers(res.data));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      messagesAPI.getConversation(selectedUser.username).then(res => setMessages(res.data));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    const socket = getSocket();\n    if (!socket) return;\n    socket.on('receive_message', (msg) => {\n      if (msg.from === selectedUser?.username || msg.to === selectedUser?.username) {\n        setMessages(prev => [...prev, msg]);\n      }\n    });\n    return () => {\n      socket.off('receive_message');\n    };\n  }, [selectedUser]);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (!input || !selectedUser) return;\n    setLoading(true);\n    try {\n      const { encryptedMessage, encryptedAESKey } = await hybridEncryptMessage(input, selectedUser.publicKey);\n      const messageData = {\n        to: selectedUser.username,\n        encryptedContent: encryptedMessage,\n        encryptedAESKey,\n        messageType: 'text'\n      };\n      await messagesAPI.sendMessage(messageData);\n      setMessages(prev => [...prev, { from: currentUser.username, to: selectedUser.username, encryptedContent: encryptedMessage, encryptedAESKey, messageType: 'text' }]);\n      getSocket().emit('send_message', { from: currentUser.username, to: selectedUser.username, encryptedContent: encryptedMessage, encryptedAESKey, messageType: 'text' });\n      setInput('');\n      showStatus('Message sent', 'success');\n    } catch (err) {\n      showStatus('Failed to send message', 'error');\n    }\n    setLoading(false);\n  };\n\n  const renderMessages = () => messages.map((msg, idx) => (\n    <MessageItem key={idx} msg={msg} currentUser={currentUser} />\n  ));\n\n  return (\n    <div className=\"chat-container\">\n      <aside className=\"user-list\">\n        <h3>Users</h3>\n        <ul>\n          {users.map(user => (\n            <li key={user.username}>\n              <button onClick={() => setSelectedUser(user)}>\n                {user.username} {user.isOnline ? 'ðŸŸ¢' : 'âšª'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </aside>\n      <main className=\"chat-main\">\n        {selectedUser ? (\n          <>\n            <h3>Chat with {selectedUser.username}</h3>\n            <div className=\"messages\">{renderMessages()}</div>\n            <form onSubmit={sendMessage} className=\"send-form\">\n              <input\n                type=\"text\"\n                value={input}\n                onChange={e => setInput(e.target.value)}\n                placeholder=\"Type your message...\"\n                required\n              />\n              <button type=\"submit\" disabled={loading}>Send</button>\n            </form>\n          </>\n        ) : (\n          <div>Select a user to start chatting.</div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nconst MessageItem = ({ msg, currentUser }) => {\n  const [decrypted, setDecrypted] = useState('');\n  useEffect(() => {\n    const decrypt = async () => {\n      try {\n        const encryptedPrivateKey = localStorage.getItem('privateKey');\n        const passphrase = prompt('Enter your password to decrypt messages:');\n        const privateKey = await decryptPrivateKeyAES(encryptedPrivateKey, passphrase);\n        if (msg.from === currentUser.username) {\n          setDecrypted('[You] ' + msg.encryptedContent);\n        } else {\n          const dec = await hybridDecryptMessage(msg.encryptedContent, msg.encryptedAESKey, privateKey, passphrase);\n          setDecrypted(dec);\n        }\n      } catch {\n        setDecrypted('[Encrypted]');\n      }\n    };\n    decrypt();\n  }, [msg, currentUser]);\n  return <div className={`message ${msg.from === currentUser.username ? 'sent' : 'received'}`}>{decrypted}</div>;\n};\n\nexport default ChatContainer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}